{"mappings":"ICWI,EAAK,EAAQ,EAAY,EAAe,EAT5C,MAAM,EAAmB,SAAS,aAAa,CAAC,sBAC1C,EAAW,SAAS,aAAa,CAAC,aAClC,EAAS,SAAS,aAAa,CAAC,WAChC,EAAc,SAAS,aAAa,CAAC,cAQrC,EAAO,WAEX,EAAM,EACN,EAAS,EACT,EAAa,CAAA,EAEb,EAAO,WAAW,CAAG,qBAGrB,EAAiB,SAAS,CAAG,GAG7B,IAAI,EAAa,GAEjB,IAAK,IAAI,EAAI,EAAG,EApBC,EAoBe,IAC9B,GAAc;AACkB,oCAAA,EAAE,EAAI,EAAE;A;A;A;A;A;A;AAOxC,IAAA,CAAC,AAGH,CAAA,EAAiB,SAAS,CAAG,CAC/B,EAEM,EAAW,SAAU,CAAG,CAAE,CAAM,EAEpC,EAAgB,AADhB,CAAA,EAAa,SAAS,aAAa,CAAC,CAAC,KAAK,EAAE,EAAA,CAAK,CAAA,EACtB,QAAQ,CAAC,EAAS,EAAE,AACjD,EAEM,EAAY,WACZ,GAAO,GAAG,IACd,EAAS,CACX,EAEM,EAAe,SAAU,CAAO,EAEpC,IAAI,EAAO,QACL,EAAc,EAAK,KAAK,CAAC,IACzB,EAAY,IAAI,EAAY,CAElC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,IAC3B,CAAW,CAAC,EAAE,EAAI,CAAO,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,KACtD,CAAO,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,kBACzB,CAAS,CAAC,EAAE,CAAG,MAqBnB,GAjBA,EAAQ,GAAG,CAAC,AAAC,IACX,IAAM,EAAkB,EAAG,WAAW,CAAC,WAAW,GAElD,GAAI,EAAU,QAAQ,CAAC,GAAkB,CACvC,EAAG,SAAS,CAAC,GAAG,CAAC,mBACjB,IAAM,EAAQ,EAAU,OAAO,CAAC,EAChC,CAAA,CAAS,CAAC,EAAM,CAAG,IACrB,MAAO,EAAG,SAAS,CAAC,GAAG,CAAC,eAC1B,GAEA,QAAQ,GAAG,CACT,EACG,GAAG,CAAC,AAAC,GAAO,EAAG,WAAW,EAC1B,IAAI,CAAC,IACL,WAAW,IAId,EACG,GAAG,CAAC,AAAC,GAAO,EAAG,WAAW,EAC1B,IAAI,CAAC,IACL,WAAW,KAAO,EACrB,CACA,EAAO,WAAW,CAAG,CAAC,sBAAsB,EAAE,EAAA,CAAM,CACpD,EAAa,CAAA,EAEb,MACF,CAEI,EAAM,EAAG,KAEX,EAAO,WAAW,CAAG,CAAC,uBAAuB,EAAE,EAAA,CAAM,CACrD,EAAa,CAAA,EAEjB,EAeA,IAEA,IAAI,EAAqB,CAAA,EAEzB,EAAS,gBAAgB,CAAC,QAAS,AAAC,IAClC,EAAE,cAAc,GAEhB,IAAM,EAAW,EAAE,MAAM,CACnB,EAAS,EAAS,OAAO,CAAC,MAAM,CAEtC,GACE,CAAC,EAAS,YAAY,CAAC,gBACvB,CAAC,GACD,EAEA,OACF,EAAqB,CAAA,EAErB,EAAS,EAAK,GAGV,GAAU,GAAK,AAAW,cAAX,GAA0B,AAAW,UAAX,IACvC,AAA6B,IAA7B,EAAc,WAAW,EAC3B,EAAc,MAAM,CAAC,EAAS,WAAW,EACvC,GAAU,GAAG,KAIJ,cAAX,GAA0B,GAAU,IAClC,EAAS,GAAG,IAChB,EAAS,EAAK,GACd,EAAc,SAAS,CAAG,IAI5B,IAAM,EAAa,MAAM,IAAI,CAAC,EAAW,QAAQ,CAE7C,AAAW,CAAA,UAAX,GAAsB,EAAW,KAAK,CAAC,AAAC,GAAO,AAAmB,KAAnB,EAAG,WAAW,GAK/D,EAAa,GAIf,WAAW,IAAO,EAAqB,CAAA,EAAQ,IACjD,GAEA,EAAY,gBAAgB,CAAC,QAAS","sources":["<anon>","app.js"],"sourcesContent":["var $6b17f08f738443dc$exports = {};\n'use strict';\nconst $6b17f08f738443dc$var$guessesContainer = document.querySelector('.guesses-container');\nconst $6b17f08f738443dc$var$keyboard = document.querySelector('.keyboard');\nconst $6b17f08f738443dc$var$header = document.querySelector('.header');\nconst $6b17f08f738443dc$var$retryButton = document.querySelector('.retry-btn');\nconst $6b17f08f738443dc$var$GUESS_ROWS = 6;\nconst $6b17f08f738443dc$var$API_URL = '';\nconst $6b17f08f738443dc$var$tempWords = [\n    'apple',\n    'watch',\n    'great',\n    'blaze',\n    'drive'\n];\nlet $6b17f08f738443dc$var$row, $6b17f08f738443dc$var$column, $6b17f08f738443dc$var$guessRowEl, $6b17f08f738443dc$var$guessColumnEl, $6b17f08f738443dc$var$activeGame;\nconst $6b17f08f738443dc$var$init = function() {\n    // Initial values\n    $6b17f08f738443dc$var$row = 1;\n    $6b17f08f738443dc$var$column = 1;\n    $6b17f08f738443dc$var$activeGame = true;\n    $6b17f08f738443dc$var$header.textContent = 'Welcome to wordle!';\n    // Clear rows\n    $6b17f08f738443dc$var$guessesContainer.innerHTML = '';\n    // Dynamically generate 6 rows\n    let rowsString = '';\n    for(let i = 0; i < $6b17f08f738443dc$var$GUESS_ROWS; i++)rowsString += `\n        <div class=\"row-guesses row-${i + 1}\">\n            <div class=\"letter col-1\"></div>\n            <div class=\"letter col-2\"></div>\n            <div class=\"letter col-3\"></div>\n            <div class=\"letter col-4\"></div>\n            <div class=\"letter col-5\"></div>\n        </div>\n    `;\n    $6b17f08f738443dc$var$guessesContainer.innerHTML = rowsString;\n};\nconst $6b17f08f738443dc$var$updateUI = function(row, column) {\n    $6b17f08f738443dc$var$guessRowEl = document.querySelector(`.row-${row}`);\n    $6b17f08f738443dc$var$guessColumnEl = $6b17f08f738443dc$var$guessRowEl.children[column - 1];\n};\nconst $6b17f08f738443dc$var$updateRow = function() {\n    if ($6b17f08f738443dc$var$row <= 6) $6b17f08f738443dc$var$row++;\n    $6b17f08f738443dc$var$column = 1;\n};\nconst $6b17f08f738443dc$var$compareGuess = function(wordArr) {\n    // Temp word\n    let word = 'apple';\n    const wordToArray = word.split('');\n    const remaining = [\n        ...wordToArray\n    ];\n    for(let i = 0; i < word.length; i++)if (wordToArray[i] == wordArr[i].textContent.toLowerCase()) {\n        wordArr[i].classList.add('correct-letter');\n        remaining[i] = null;\n    }\n    wordArr.map((el)=>{\n        const letterLowerCase = el.textContent.toLowerCase();\n        if (remaining.includes(letterLowerCase)) {\n            el.classList.add('partial-correct');\n            const index = remaining.indexOf(letterLowerCase);\n            remaining[index] = null;\n        } else el.classList.add('wrong-letter');\n    });\n    console.log(wordArr.map((el)=>el.textContent).join('').toLowerCase());\n    if (wordArr.map((el)=>el.textContent).join('').toLowerCase() === word) {\n        $6b17f08f738443dc$var$header.textContent = `You win! the word was ${word}`;\n        $6b17f08f738443dc$var$activeGame = false;\n        return;\n    }\n    if ($6b17f08f738443dc$var$row < 6) $6b17f08f738443dc$var$updateRow();\n    else {\n        $6b17f08f738443dc$var$header.textContent = `You lost! the word was ${word}`;\n        $6b17f08f738443dc$var$activeGame = false;\n    }\n};\n// const getWord = async function () {\n//   try {\n//     const res = await fetch(`${API_URL}/`);\n//     const data = await res.json();\n//     if (!res.ok) throw new Error();\n//     return data;\n//   } catch (err) {\n//     console.error(err);\n//   }\n// };\n$6b17f08f738443dc$var$init();\nlet $6b17f08f738443dc$var$preventDoubleClick = false;\n$6b17f08f738443dc$var$keyboard.addEventListener('click', (e)=>{\n    e.preventDefault();\n    const letterEl = e.target;\n    const letter = letterEl.dataset.letter;\n    if (!letterEl.hasAttribute('data-letter') || !$6b17f08f738443dc$var$activeGame || $6b17f08f738443dc$var$preventDoubleClick) return;\n    $6b17f08f738443dc$var$preventDoubleClick = true;\n    $6b17f08f738443dc$var$updateUI($6b17f08f738443dc$var$row, $6b17f08f738443dc$var$column);\n    // Adding letters\n    if ($6b17f08f738443dc$var$column <= 5 && letter !== 'backspace' && letter !== 'enter') {\n        if ($6b17f08f738443dc$var$guessColumnEl.textContent == '') $6b17f08f738443dc$var$guessColumnEl.append(letterEl.textContent);\n        if ($6b17f08f738443dc$var$column <= 5) $6b17f08f738443dc$var$column++;\n    }\n    // Removing letters\n    if (letter === 'backspace' && $6b17f08f738443dc$var$column >= 1) {\n        if ($6b17f08f738443dc$var$column > 1) $6b17f08f738443dc$var$column--;\n        $6b17f08f738443dc$var$updateUI($6b17f08f738443dc$var$row, $6b17f08f738443dc$var$column);\n        $6b17f08f738443dc$var$guessColumnEl.innerHTML = '';\n    }\n    // Compare word and move onto next row\n    const rowToArray = Array.from($6b17f08f738443dc$var$guessRowEl.children);\n    if (letter === 'enter' && rowToArray.every((el)=>el.textContent !== '')) // Working on this once I set up a word fetching system\n    // TODO: Setup word checker functionality\n    $6b17f08f738443dc$var$compareGuess(rowToArray);\n    // Adds 100ms cooldown between each click; backspace keeps firing twice for some reason\n    setTimeout(()=>$6b17f08f738443dc$var$preventDoubleClick = false, 100);\n});\n$6b17f08f738443dc$var$retryButton.addEventListener('click', $6b17f08f738443dc$var$init);\n\n\n//# sourceMappingURL=wordle.289a8934.js.map\n","'use strict';\r\n\r\nconst guessesContainer = document.querySelector('.guesses-container');\r\nconst keyboard = document.querySelector('.keyboard');\r\nconst header = document.querySelector('.header');\r\nconst retryButton = document.querySelector('.retry-btn');\r\n\r\nconst GUESS_ROWS = 6;\r\nconst API_URL = '';\r\nconst tempWords = ['apple', 'watch', 'great', 'blaze', 'drive'];\r\n\r\nlet row, column, guessRowEl, guessColumnEl, activeGame;\r\n\r\nconst init = function () {\r\n  // Initial values\r\n  row = 1;\r\n  column = 1;\r\n  activeGame = true;\r\n\r\n  header.textContent = 'Welcome to wordle!';\r\n\r\n  // Clear rows\r\n  guessesContainer.innerHTML = '';\r\n\r\n  // Dynamically generate 6 rows\r\n  let rowsString = '';\r\n\r\n  for (let i = 0; i < GUESS_ROWS; i++) {\r\n    rowsString += `\r\n        <div class=\"row-guesses row-${i + 1}\">\r\n            <div class=\"letter col-1\"></div>\r\n            <div class=\"letter col-2\"></div>\r\n            <div class=\"letter col-3\"></div>\r\n            <div class=\"letter col-4\"></div>\r\n            <div class=\"letter col-5\"></div>\r\n        </div>\r\n    `;\r\n  }\r\n\r\n  guessesContainer.innerHTML = rowsString;\r\n};\r\n\r\nconst updateUI = function (row, column) {\r\n  guessRowEl = document.querySelector(`.row-${row}`);\r\n  guessColumnEl = guessRowEl.children[column - 1];\r\n};\r\n\r\nconst updateRow = function () {\r\n  if (row <= 6) row++;\r\n  column = 1;\r\n};\r\n\r\nconst compareGuess = function (wordArr) {\r\n  // Temp word\r\n  let word = 'apple';\r\n  const wordToArray = word.split('');\r\n  const remaining = [...wordToArray];\r\n\r\n  for (let i = 0; i < word.length; i++) {\r\n    if (wordToArray[i] == wordArr[i].textContent.toLowerCase()) {\r\n      wordArr[i].classList.add('correct-letter');\r\n      remaining[i] = null;\r\n    }\r\n  }\r\n\r\n  wordArr.map((el) => {\r\n    const letterLowerCase = el.textContent.toLowerCase();\r\n\r\n    if (remaining.includes(letterLowerCase)) {\r\n      el.classList.add('partial-correct');\r\n      const index = remaining.indexOf(letterLowerCase);\r\n      remaining[index] = null;\r\n    } else el.classList.add('wrong-letter');\r\n  });\r\n\r\n  console.log(\r\n    wordArr\r\n      .map((el) => el.textContent)\r\n      .join('')\r\n      .toLowerCase()\r\n  );\r\n\r\n  if (\r\n    wordArr\r\n      .map((el) => el.textContent)\r\n      .join('')\r\n      .toLowerCase() === word\r\n  ) {\r\n    header.textContent = `You win! the word was ${word}`;\r\n    activeGame = false;\r\n\r\n    return;\r\n  }\r\n\r\n  if (row < 6) updateRow();\r\n  else {\r\n    header.textContent = `You lost! the word was ${word}`;\r\n    activeGame = false;\r\n  }\r\n};\r\n\r\n// const getWord = async function () {\r\n//   try {\r\n//     const res = await fetch(`${API_URL}/`);\r\n//     const data = await res.json();\r\n\r\n//     if (!res.ok) throw new Error();\r\n\r\n//     return data;\r\n//   } catch (err) {\r\n//     console.error(err);\r\n//   }\r\n// };\r\n\r\ninit();\r\n\r\nlet preventDoubleClick = false;\r\n\r\nkeyboard.addEventListener('click', (e) => {\r\n  e.preventDefault();\r\n\r\n  const letterEl = e.target;\r\n  const letter = letterEl.dataset.letter;\r\n\r\n  if (\r\n    !letterEl.hasAttribute('data-letter') ||\r\n    !activeGame ||\r\n    preventDoubleClick\r\n  )\r\n    return;\r\n  preventDoubleClick = true;\r\n\r\n  updateUI(row, column);\r\n\r\n  // Adding letters\r\n  if (column <= 5 && letter !== 'backspace' && letter !== 'enter') {\r\n    if (guessColumnEl.textContent == '')\r\n      guessColumnEl.append(letterEl.textContent);\r\n    if (column <= 5) column++;\r\n  }\r\n\r\n  // Removing letters\r\n  if (letter === 'backspace' && column >= 1) {\r\n    if (column > 1) column--;\r\n    updateUI(row, column);\r\n    guessColumnEl.innerHTML = '';\r\n  }\r\n\r\n  // Compare word and move onto next row\r\n  const rowToArray = Array.from(guessRowEl.children);\r\n\r\n  if (letter === 'enter' && rowToArray.every((el) => el.textContent !== '')) {\r\n    // Working on this once I set up a word fetching system\r\n\r\n    // TODO: Setup word checker functionality\r\n\r\n    compareGuess(rowToArray);\r\n  }\r\n\r\n  // Adds 100ms cooldown between each click; backspace keeps firing twice for some reason\r\n  setTimeout(() => (preventDoubleClick = false), 100);\r\n});\r\n\r\nretryButton.addEventListener('click', init);\r\n"],"names":["$6b17f08f738443dc$var$row","$6b17f08f738443dc$var$column","$6b17f08f738443dc$var$guessRowEl","$6b17f08f738443dc$var$guessColumnEl","$6b17f08f738443dc$var$activeGame","$6b17f08f738443dc$var$guessesContainer","document","querySelector","$6b17f08f738443dc$var$keyboard","$6b17f08f738443dc$var$header","$6b17f08f738443dc$var$retryButton","$6b17f08f738443dc$var$init","textContent","innerHTML","rowsString","i","$6b17f08f738443dc$var$updateUI","row","column","children","$6b17f08f738443dc$var$updateRow","$6b17f08f738443dc$var$compareGuess","wordArr","word","wordToArray","split","remaining","length","toLowerCase","classList","add","map","el","letterLowerCase","includes","index","indexOf","console","log","join","$6b17f08f738443dc$var$preventDoubleClick","addEventListener","e","preventDefault","letterEl","target","letter","dataset","hasAttribute","append","rowToArray","Array","from","every","setTimeout"],"version":3,"file":"wordle.289a8934.js.map"}